import {
  app,
  BrowserWindow,
  ipcMain,
  IpcMainEvent,
  dialog,
  Menu,
} from "electron";
import { IPC_CHANNEL_NAMES } from "./const";

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

/**
 * Refer to: #pattern-2-renderer-to-main-two-way
 */
async function handleFileOpen() {
  const { canceled, filePaths } = await dialog.showOpenDialog({});

  if (!canceled) {
    return filePaths[0];
  }
}

/**
 * Refer to: #pattern-1-renderer-to-main-one-way
 */
function handleSetTitle(event: IpcMainEvent, title: string) {
  const webContents = event.sender;
  const win = BrowserWindow.fromWebContents(webContents);
  win.setTitle(title);
}

const createWindow = (): void => {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  const menu = Menu.buildFromTemplate([
    {
      label: app.name, // "update counter",
      submenu: [
        {
          click: () =>
            win.webContents.send(
              IPC_CHANNEL_NAMES.WEB_CONTENTS.UPDATE_COUNTER,
              1
            ),
          label: "Increment",
        },
        {
          click: () =>
            win.webContents.send(
              IPC_CHANNEL_NAMES.WEB_CONTENTS.UPDATE_COUNTER,
              -1
            ),
          label: "Decrement",
        },
      ],
    },
  ]);

  Menu.setApplicationMenu(menu);

  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  win.webContents.openDevTools();
};

app.whenReady().then(() => {
  ipcMain.handle(IPC_CHANNEL_NAMES.PING, () => "pong");

  ipcMain.on(IPC_CHANNEL_NAMES.SET_TITLE, handleSetTitle);
  ipcMain.handle(IPC_CHANNEL_NAMES.DIALOG.OPEN_FILE, handleFileOpen);

  /**
   * Using ipcRenderer.send in two-way communication
   */
  // ipcMain.on(
  //   IPC_CHANNEL_NAMES.ASYNC_MSG,
  //   (event: IpcMainEvent, arg: string) => {
  //     console.group("Using ipcRenderer.send");
  //     console.log("arg", arg, "in Node.js");
  //     console.groupEnd();

  //     event.reply(IPC_CHANNEL_NAMES.ASYNC_REPLY, "pong");
  //   }
  // );

  /**
   * Using ipcRenderer.sendSync in two-way communication
   */
  // ipcMain.on(IPC_CHANNEL_NAMES.SYNC_MSG, (event: IpcMainEvent, arg: string) => {
  //   console.group("Using ipcRenderer.sendSync");
  //   console.log("arg", arg, "in Node.js");
  //   console.groupEnd();

  //   event.returnValue = "pong";
  // });

  ipcMain.on(
    IPC_CHANNEL_NAMES.WEB_CONTENTS.COUNTER_VALUE,
    (_event: IpcMainEvent, arg: number) => {
      console.log(`Changed to ${arg}`);
    }
  );

  createWindow();

  app.on("activate", () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

/*
import { app, BrowserWindow } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
*/
